{"version":3,"sources":["script.js"],"names":["$","document","ready","let","CardTypes","name","image","el","showSplash","startTime","timer","shuffleCards","score","game","cardFlipTimeInit","Vue","pairsCorrect","data","methods","turns","cards","concat","_","cloneDeep","flipBackTimer","shuffle","time","started","each","card","cardTimeComplete","found","_this","this","resetGame","window","flipped","flippedCards","sameFlippedCard","countdownTimer","savePointGame","foundCards","filter","length","pointMulti","console","log","setCardFounds","checkAllFound","startGame","flipCard","flipCount","setTimeout","clearFlips","clearFlipBackTimer","clearTimeout","created"],"mappings":"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","file":"script.js","sourcesContent":["$(document).ready(function () {\n  let CardTypes = [\n    { name: \"carta1\", image: \"../../assets/img/game1/carta1.svg\" },\n    { name: \"carta2\", image: \"../../assets/img/game1/carta2.svg\" },\n    { name: \"carta3\", image: \"../../assets/img/game1/carta3.svg\" },\n    { name: \"carta4\", image: \"../../assets/img/game1/carta4.svg\" },\n    { name: \"carta5\", image: \"../../assets/img/game1/carta5.svg\" },\n    { name: \"carta6\", image: \"../../assets/img/game1/carta6.svg\" },\n    { name: \"carta7\", image: \"../../assets/img/game1/carta7.svg\" },\n    { name: \"carta8\", image: \"../../assets/img/game1/carta8.svg\" },\n    { name: \"carta9\", image: \"../../assets/img/game1/carta9.svg\" },\n  ];\n\n  let shuffleCards = () => {\n    let cards = [].concat(_.cloneDeep(CardTypes), _.cloneDeep(CardTypes));\n    return _.shuffle(cards);\n  };\n\n  new Vue({\n    el: \"#app\",\n\n    data: {\n      showSplash: false,\n      cards: [],\n      started: false,\n      startTime: 0,\n      turns: 0,\n      flipBackTimer: null,\n      timer: null,\n      time: \"00:40:00\",\n      score: 0,\n      game: 1,\n      cardFlipTimeInit: 3, /// Tempo inicial em que os flip card ficam virados\n      cardTimeComplete: 40 * 1, //60*1 /// tempo do cronometro\n      pairsCorrect: 0, /// Pares corretos de cards\n      pointMulti: 10, // Multiplo dos pontos finais\n    },\n\n    methods: {\n      resetGame() {\n        this.showSplash = false;\n        let cards = shuffleCards();\n        this.turns = 0;\n        this.score = 0;\n        this.started = false;\n        this.startTime = 0;\n\n        _.each(cards, (card) => {\n          card.flipped = true;\n          card.found = false;\n        });\n\n        //Nil\n        const _this = this;\n        setTimeout(() => {\n          _.each(cards, (card) => {\n            card.flipped = false;\n            card.found = false;\n          });\n\n          window.countdownTimer(_this.cardTimeComplete, () => {\n            _this.savePointGame();\n          });\n        }, 1000 * this.cardFlipTimeInit);\n        //Nil\n\n        this.cards = cards;\n      },\n\n      flippedCards() {\n        return _.filter(this.cards, (card) => card.flipped);\n      },\n\n      sameFlippedCard() {\n        let flippedCards = this.flippedCards();\n        if (flippedCards.length == 2) {\n          if (flippedCards[0].name == flippedCards[1].name) return true;\n        }\n      },\n\n      savePointGame() {\n        let foundCards = _.filter(this.cards, (card) => card.found);\n        this.pairsCorrect = (foundCards.length / 2) * this.pointMulti;\n        console.log(this.pairsCorrect);\n\n        $(\"body\").trigger(\"game\", [this.game, this.pairsCorrect]);\n      },\n\n      setCardFounds() {\n        _.each(this.cards, (card) => {\n          if (card.flipped) {\n            card.found = true;\n          }\n        });\n      },\n\n      checkAllFound() {\n        let foundCards = _.filter(this.cards, (card) => card.found);\n        if (foundCards.length == this.cards.length) return true;\n      },\n\n      // countdownTimer(duration , call) {\n      //   let timer = duration;\n      //   let timePosTip = duration; // Definir o valor inicial dos segundos\n      //   let miliPosTip = 0; // Definir o valor inicial dos milissegundos\n\n      //   const formatTime = (seconds, milliseconds) => {\n      //       let formattedMinutes = '00';\n      //       let formattedSeconds = seconds.toString().padStart(2, '0');\n      //       let formattedMilliseconds = milliseconds.toString().padStart(2, '0');\n      //       return `${formattedMinutes}:${formattedSeconds}:${formattedMilliseconds}`;\n      //   };\n\n      //   const interval = setInterval(() => {\n      //       if (timePosTip === 0 && miliPosTip === 0) {\n      //           clearInterval(interval);\n      //           this.savePointGame();\n      //       } else {\n      //           miliPosTip -= 1;\n      //           if (miliPosTip < 0) {\n      //               miliPosTip = 99;\n      //               timePosTip -= 1;\n      //           }\n      //       }\n\n      //       // Atualizar a exibição do contador\n      //       const formattedTime = formatTime(timePosTip, miliPosTip);\n      //       $(\".info .value\").text(formattedTime);\n      //   }, 10); // Intervalo de atualização de 10 milissegundos (para corresponder ao intervalo do contador original)\n      // },\n\n      // countdownTimer(duration) {\n      //   let timer = duration,\n      //     minutes,\n      //     seconds;\n      //     const interval = setInterval(() => {\n      //       minutes = parseInt(0);\n      //       seconds = parseInt(timer % 60, 10);\n\n      //       minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      //       seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n      //       this.time = minutes + \":\" + seconds;\n\n      //       if (--timer < 0) {\n      //         clearInterval(interval);\n      //         this.time = \"00:00:00\";\n      //         // alert(\"Tempo esgotado!\");\n      //         //navigate.goto(`05_ranking`);\n      //         // this.savePointGame();\n      //       }\n      //     }, 1000);\n      // },\n\n      startGame() {\n        this.started = true;\n        // this.startTime = moment();\n\n        // this.timer = setInterval(() => {\n        //     this.time = moment( moment().diff(this.startTime)).format(\"mm:ss\");\n        // }, 1000);\n      },\n\n      flipCard(card) {\n        if (card.found || card.flipped) return;\n\n        if (!this.started) {\n          this.startGame();\n        }\n\n        let flipCount = this.flippedCards().length;\n        if (flipCount == 0) {\n          card.flipped = !card.flipped;\n        } else if (flipCount == 1) {\n          card.flipped = !card.flipped;\n          this.turns += 1;\n\n          if (this.sameFlippedCard()) {\n            // Match!\n            this.flipBackTimer = setTimeout(() => {\n              this.clearFlipBackTimer();\n              this.setCardFounds();\n              this.clearFlips();\n\n              if (this.checkAllFound()) {\n                this.savePointGame();\n              }\n            }, 200);\n          } else {\n            // Wrong match\n            this.flipBackTimer = setTimeout(() => {\n              this.clearFlipBackTimer();\n              this.clearFlips();\n            }, 1000);\n          }\n        }\n      },\n\n      clearFlips() {\n        _.map(this.cards, (card) => (card.flipped = false));\n      },\n\n      clearFlipBackTimer() {\n        clearTimeout(this.flipBackTimer);\n        this.flipBackTimer = null;\n      },\n    },\n\n    created() {\n      this.resetGame();\n    },\n  });\n});\n"]}