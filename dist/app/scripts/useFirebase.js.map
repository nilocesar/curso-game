{"version":3,"sources":["useFirebase.js"],"names":["async","getDocumentsOrderedByField","collectionDB","fieldName","querySnapshot","empty","orderBy","get","console","log","results","let","id","data","doc","push","error","updateIfGreater","newValue","db","docRef","await","game1","transaction","game2","game3","games","Error","update","currentValue","b","addOrUpdateDocument","informativo","then","catch","name","email","empresa","uid","listenToUpdates","collection","isInitialLoad","onSnapshot","docChanges","change","call","snapshot","initFirebase","window","forEach","type","handlerFormDB","bridge","err","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","$","document","firebaseApp","firebase","initializeApp","firestore","handlerGameDB","gameName","point","listRankingDB","handlerSnapshotFormDB"],"mappings":"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","file":"useFirebase.js","sourcesContent":["window.firebaseConfig = {\n  apiKey: \"AIzaSyC6r6ivnQ7Lx1Hikb_YNdQxf3lj2XOGkWA\",\n  authDomain: \"febraban-v1.firebaseapp.com\",\n  databaseURL: \"https://febraban-v1-default-rtdb.firebaseio.com\",\n  projectId: \"febraban-v1\",\n  storageBucket: \"febraban-v1.appspot.com\",\n  messagingSenderId: \"824190571881\",\n  appId: \"1:824190571881:web:370fe41aa5d1ece5ab19f8\",\n  measurementId: \"G-1NV8HNSJZJ\",\n};\n\nasync function getDocumentsOrderedByField(collectionDB, fieldName) {\n  try {\n    const querySnapshot = await collectionDB.orderBy(fieldName, \"desc\").get();\n\n    if (querySnapshot.empty) {\n      console.log(\"No matching documents.\");\n      return [];\n    }\n\n    let results = [];\n    querySnapshot.forEach((doc) => {\n      results.push({\n        id: doc.id,\n        data: doc.data(),\n      });\n    });\n\n    return results;\n  } catch (error) {\n    console.error(\"Error retrieving documents: \", error);\n    return [];\n  }\n}\n\nasync function updateIfGreater(db, docRef, fieldName, newValue) {\n  try {\n    await db.runTransaction(async (transaction) => {\n      const doc = await transaction.get(docRef);\n      if (!doc.exists) {\n        throw new Error(\"Document does not exist!\");\n      }\n\n      const game1 = doc.data()[\"game1\"] || 0;\n      const game2 = doc.data()[\"game2\"] || 0;\n      const game3 = doc.data()[\"game3\"] || 0;\n      const games = [game1, game2, game3];\n      games.sort(function (a, b) {\n        return b - a;\n      });\n\n      const currentValue = doc.data()[fieldName] || 0;\n\n      if (newValue > currentValue) {\n        transaction.update(docRef, {\n          [fieldName]: newValue,\n          maior: newValue > games[0] ? newValue : games[0],\n        });\n        console.log(\"Field updated because the new value is greater.\");\n      } else {\n        console.log(\"Field not updated because the new value is not greater.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Transaction failed: \", error);\n  }\n}\n\nfunction addOrUpdateDocument(docRef, data) {\n  try {\n    docRef\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          console.log(\"update\", docRef);\n          docRef\n            .update({\n              name: data.name,\n              email: data.email,\n              empresa: data.empresa,\n              informativo: data.informativo,\n              uid: data.uid,\n            })\n            .then(() => {\n              console.log(\"Document successfully update!\");\n            })\n            .catch((error) => {\n              console.error(\"Error update: \", error);\n            });\n        } else {\n          console.log(\"set\", docRef);\n          docRef\n            .set({\n              name: data.name,\n              email: data.email,\n              empresa: data.empresa,\n              informativo: data.informativo,\n              uid: data.uid,\n            })\n            .then(() => {\n              console.log(\"Document successfully written!\");\n            })\n            .catch((error) => {\n              console.error(\"Error writing document: \", error);\n            });\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error set:\", error);\n      });\n  } catch (error) {\n    console.error(\"Erro ao adicionar ou atualizar documento: \", error);\n  }\n}\n\nfunction listenToUpdates(collection, call) {\n  let isInitialLoad = true;\n\n  collection.onSnapshot(\n    (snapshot) => {\n      if (isInitialLoad) {\n        // Ignorar o primeiro snapshot, que é o estado inicial da coleção\n        isInitialLoad = false;\n        return;\n      }\n\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          console.log(\"New document: \", change.doc.data());\n          call(change);\n        }\n        if (change.type === \"modified\") {\n          console.log(\"Modified document: \", change.doc.data());\n          call(change);\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n}\n\n///Inicialização do Firebase\nwindow.initFirebase = false;\n$(document).ready(function () {\n  if (!window.initFirebase) {\n    const firebaseApp = firebase.initializeApp(window.firebaseConfig);\n    window.db = firebaseApp.firestore();\n    window.collectionDB = window.db.collection(\"usuarios\");\n    window.initFirebase = true;\n  }\n});\n\n/// Criação do formulario\nbridge.handlerFormDB = function (data) {\n  const docRef = window.collectionDB.doc(data.email);\n  addOrUpdateDocument(docRef, data);\n};\n\n/// Criação da nota do game\nbridge.handlerGameDB = function (email, gameName, point) {\n  const docRef = window.collectionDB.doc(email);\n  updateIfGreater(window.db, docRef, gameName, point);\n};\n\n/// Criação da Ranking\nbridge.listRankingDB = function (call) {\n  getDocumentsOrderedByField(window.collectionDB, \"maior\")\n    .then((results) => {\n      console.log(\"Documents ordered by field in descending order:\");\n      call(results);\n    })\n    .catch((error) => {\n      console.error(\"Error in getDocumentsOrderedByField: \", error);\n    });\n};\n\n/// Controle do formulário via realtime - para mobile\nbridge.handlerSnapshotFormDB = function (call) {\n  listenToUpdates(window.collectionDB, call);\n};\n"]}